// @ts-expect-error tsnejs is not typed
import { tSNE } from "@jwalsh/tsnejs/lib";
import { Chart } from "chart.js/auto";
import { parse } from "csv-parse";
import fs from "fs/promises";
import Head from "next/head";
import { useEffect, useRef } from "react";

export async function getStaticProps(context) {
  // const csv = await fs.readFile("./public/slim.csv", "utf8");
  const csv = await fs.readFile("./public/helpdata_help_embedding.csv", "utf8");
  const records = await new Promise((resolve, reject) => {
    parse(csv, { trim: true, columns: true }, (err, records) => {
      if (err) {
        reject(err);
      } else {
        resolve(records);
      }
    });
  });

  const limit = 1525; // これ以上大きくするとなぜか結果がnullになる

  const opt = {
    epsilon: 10, // epsilon is learning rate (10 = default)
    perplexity: 30, // roughly how many neighbors each point influences (30 = default)
    dim: 2, // dimensionality of the embedding (2 = default)
  };

  const tsne = new tSNE(opt); // create a tSNE instance

  // initialize data. Here we have 3 points and some example pairwise dissimilarities
  const dists = records
    .slice(0, limit)
    .map((record) => JSON.parse(record["ada_embedding"]));
  tsne.initDataDist(dists);

  // every time you call this, solution gets better
  [...Array(500)].forEach((_, i) => tsne.step());
  const vectors = tsne.getSolution(); // Y is an array of 2-D points that you can plot

  return {
    props: {
      vectors,
      labels: records.map((record) => record.title),
    },
  };
}

export default function Home(props) {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const chartRef = useRef<Chart>();
  useEffect(() => {
    if (!canvasRef.current || chartRef.current) {
      return;
    }

    const chart = new Chart(canvasRef.current, {
      type: "scatter",
      data: {
        datasets: [
          {
            data: props.vectors.map(([x, y]) => ({ x, y })),
          },
        ],
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
          },
        },
        plugins: {
          tooltip: {
            callbacks: {
              label: function (context) {
                const label = props.labels[context.dataIndex];
                console.log(context);
                return label;
              },
            },
          },
        },
      },
    });
    chartRef.current = chart;
  });

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1>t-SNE</h1>
        <canvas ref={canvasRef}></canvas>
      </main>
    </>
  );
}
